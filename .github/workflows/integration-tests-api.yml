name: Integration test - API
on: pull_request

jobs:
  runTests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
    strategy:
      matrix:
        node-version: ['lts/*'] # 18.17.1 or lts/*
        test-pattern:
          - accounts.test.ts
          - addresses.test.ts
          - batches.test.ts
          - blocks.test.ts
          - contracts.test.ts
          - logs.test.ts
          - stats.test.ts
          - tokens.test.ts
          - transactions.test.ts
    name: 'API test set: ${{ matrix.test-pattern}} / Node: ${{ matrix.node-version}}'
    steps:
      - name: Checkout with Submodule
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: |
          npm ci --no-audit
          npx playwright install --with-deps chromium

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Print Working Directory
        run: |
          pwd

      - name: Check Docker cache and use if available
        run: |
          SERVICES=("block-explorer_worker" "postgres" "matterlabs_local_node")  # List of services
          for SERVICE in "${SERVICES[@]}"; do
            CACHE_IMAGE=$(docker images -q "$SERVICE:latest")
            if [ -n "$CACHE_IMAGE" ]; then
              echo "Using cached image for $SERVICE: $CACHE_IMAGE"
              docker-compose -f "docker-compose.yaml" up -d --build $SERVICE
            else
              echo "No cached image found for $SERVICE. Building from scratch."
              docker-compose -f "docker-compose.yaml" up -d --build $SERVICE
            fi
          done

      - name: List running containers
        run: docker ps

      - name: API tests run (parallel)
        run: |
          cd packages/integration-tests
          npx jest --verbose --testPathPattern=${{ matrix.test-pattern }}

      - name: Stop containers
        if: always()
        run: |
          docker-compose -f "docker-compose.yaml" down
